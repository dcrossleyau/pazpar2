<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1//EN"
    "http://www.oasis-open.org/docbook/xml/4.1/docbookx.dtd" 
[
     <!ENTITY % local SYSTEM "local.ent">
     %local;
     <!ENTITY % entities SYSTEM "entities.ent">
     %entities;
     <!ENTITY % common SYSTEM "common/common.ent">
     %common;
]>
<!-- $Id: book.xml,v 1.4 2007-01-13 05:48:41 quinn Exp $ -->
<book id="book">
 <bookinfo>
  <title>Pazpar2 - User's Guide and Reference</title>
  <author>
   <firstname>Sebastian</firstname><surname>Hammer</surname>
  </author>
  <copyright>
   <year>&copyright-year;</year>
   <holder>Index Data</holder>
  </copyright>
  <abstract>
   <simpara>
    Pazpar2 - High-performance, user-interface independent, metasearching
	  middleware featuring record merging, relevance ranking, and faceted search
	  results.
   </simpara>
   <simpara>
    This document is a guide and reference to Pazpar version &version;.
   </simpara>
   <simpara>
    <inlinemediaobject>
     <imageobject>
      <imagedata fileref="common/id.png" format="PNG"/>
     </imageobject>
     <imageobject>
      <imagedata fileref="common/id.eps" format="EPS"/>
     </imageobject>
    </inlinemediaobject>
   </simpara>
  </abstract>
 </bookinfo>

 <chapter id="introduction">
  <title>Introduction</title>
  <para>
    Pazpar2 is a stand-alone package which implements
    the best we know to do in terms of the core metasearching
    functionality; that is, searching a number of databases in parallel,
    merging, and analyzing the results. Additional functionality such as
    user management, attractive displays are expected to be implemented by
    applications that use pazpar2. Pazpar2 is user interface independent.
    Its functionality is exposed through a simple REST-style webservice API,
    designed to be simple to use from an Ajax-anbled browser, from a
    higher-level server-side language like PHP or Java, or even from a Flash
    application.
  </para>
  <para>
    Once you launch a search in pazpar2, the operation continues behind the
    scenes. Pazpar2 connects to servers, carries out searches, and
    retrieves, deduplicates, and stores results internally. Your application
    code may periodically inquire about the status of an ongoing operation,
    and ask to see records or other result set facets.
  </para>
  <para>
    Pazpar2 is designed to be highly configurable. Incoming records are
    normalized to XML/UTF-8, and then further normalized using XSLT to a
    simple internal representation that is suitable for analysis. By
    providing XSLT stylesheets for different kinds of result records, you
    can tune pazpar2 to work against different kinds of information
    retrieval servers. Finally, metadata is extracted, in a configurable
    way, from this internal record, to support display, merging, ranking,
    result set facets, and sorting. Pazpar2 is not bound to a specific model
    of metadata, such as DublinCore or MARC -- by providing the right
    configuration, it can work with a number of different kinds of data in
    support of many different applications.
  </para>
  <para>
    Pazpar2 is designed to be efficient and scalable. You can set it up to
    search several hundred targets in parallel, or you can use it to support
    hundreds of concurrent users. It is implemented with the same attention
    to performance and economy that we use in our indexing engines, so that
    you can focus on building your application. You can devote all of your
    attention to usability and let pazpar2 do what it does best -- search.
   </para>
 </chapter>

 <chapter id="license">
  <title>Pazpar2 License</title>
  <para>To be decided and written.</para>
 </chapter>
 
 <chapter id="installation">
  <title>Installation</title>
  <para>
   Pazpar2 depends on the following tools/libraries:
   <variablelist>
    <varlistentry><term><ulink url="&url.yaz;">YAZ</ulink></term>
     <listitem>
      <para>
       The popular Z39.50 toolkit for the C language. YAZ must be
       compiled with Libxml2/Libxslt support.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   In order to compile Pazpar2 an ANSI C compiler is
   required. The requirements should be the same as for YAZ.
  </para>

  <section id="installation.unix">
   <title>Installation on Unix (from Source)</title>
   <para>
    Here is a quick step-by-step guide on how to compile the
    tools that Pazpar2 uses. Only few systems have none of the required
    tools binary packages. If, for example, Libxml2/libxslt are already
    installed as development packages use these.
   </para>
   
   <para>
    Ensure that the development libraries + header files are
    available on your system before compiling Pazpar2. For installation
    of YAZ, refer to the YAZ installation chapter.
   </para>
   <screen>
    gunzip -c pazpar2-version.tar.gz|tar xf -
    cd pazpar2-version
    ./configure
    make
    su
    make install
   </screen>
  </section>

  <section id="installation.debian">
   <title>Installation on Debian GNU/Linux</title>
   <para>
    All dependencies for Pazpar2 are available as 
    <ulink url="&url.debian;">Debian</ulink>
    packages for the sarge (stable in 2005) and etch (testing in 2005)
    distributions.
   </para>
   <para>
    The procedures for Debian based systems, such as
    <ulink url="&url.ubuntu;">Ubuntu</ulink> is probably similar
   </para>
   <screen>
    apt-get install libyaz-dev
   </screen>
   <para>
    With these packages installed, the usual configure + make
    procedure can be used for Pazpar2 as outlined in
    <xref linkend="installation.unix"/>.
   </para>
  </section>
 </chapter>
 
 <reference id="reference">
  <title>Reference</title>
  <partintro>
   <para>
    The material in this chapter is drawn directly from the individual
    manual entries.
   </para>
  </partintro>
  &manref;
 </reference>
</book>

 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document: nil
 sgml-local-catalogs: nil
 sgml-namecase-general:t
 End:
 -->
